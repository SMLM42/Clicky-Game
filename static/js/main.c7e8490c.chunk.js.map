{"version":3,"sources":["components/header/index.js","components/wrapper/index.js","components/card/index.js","components/footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","score","topScore","Wrapper","children","Card","onClick","clickedCard","id","alt","name","src","image","Footer","App","state","chars","sort","Math","random","alreadyClicked","_this","includes","setState","alert","push","length","_this2","this","header","wrapper","map","char","card","key","footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s3CAeeA,MAZf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,wFACAF,EAAAC,EAAAC,cAAA,mBAAWH,EAAMK,MAAjB,iBAAsCL,EAAMM,mBCF7CC,MAJf,SAAiBP,GACb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMQ,iBCa5BC,MAdf,SAAcT,GACV,OACIC,EAAAC,EAAAC,cAAA,OAAKO,QAAS,kBAAMV,EAAMW,YAAYX,EAAMY,KAAKR,UAAU,UACvDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKU,IAAKb,EAAMc,KACZC,IAAKf,EAAMgB,kBCEpBC,MARf,SAAgBjB,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,+BCkDOc,6MA7CbC,MAAQ,CACNC,MAAOA,EAAMC,KAAK,iBAAM,GAAMC,KAAKC,WACnClB,MAAO,EACPC,SAAU,EACVkB,eAAgB,MAElBb,YAAc,SAAAC,GACRa,EAAKN,MAAMK,eAAeE,SAASd,IACrCa,EAAKE,SAAS,CAAEtB,MAAO,EAAGmB,eAAgB,KAC1CI,MAAM,eAENH,EAAKE,SAAS,CAAEtB,MAAOoB,EAAKN,MAAMd,MAAQ,IAC1CoB,EAAKN,MAAMK,eAAeK,KAAKjB,IAE7Ba,EAAKN,MAAMd,OAASoB,EAAKN,MAAMb,UACjCmB,EAAKE,SAAS,CAAErB,SAAUmB,EAAKN,MAAMb,SAAW,IAE9CmB,EAAKN,MAAMd,QAAUoB,EAAKN,MAAMC,MAAMU,SACxCL,EAAKE,SAAS,CAAEtB,MAAO,EAAGmB,eAAgB,KAC1CI,MAAM,aAERH,EAAKE,SAAS,CAAEP,MAAOA,EAAMC,KAAK,iBAAM,GAAMC,KAAKC,sFAG5C,IAAAQ,EAAAC,KACP,OACE/B,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAC8B,EAAD,CAAQ5B,MAAO2B,KAAKb,MAAMd,MAAOC,SAAU0B,KAAKb,MAAMb,WACtDL,EAAAC,EAAAC,cAAC+B,EAAD,KACGF,KAAKb,MAAMC,MAAMe,IAAI,SAAAC,GAAI,OACxBnC,EAAAC,EAAAC,cAACkC,EAAD,CACE1B,YAAaoB,EAAKpB,YAClBC,GAAIwB,EAAKxB,GACT0B,IAAKF,EAAKxB,GACVE,KAAMsB,EAAKtB,KACXE,MAAOoB,EAAKpB,WAIlBf,EAAAC,EAAAC,cAACoC,EAAD,cAzCUC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c7e8490c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid text-center\">\r\n            <div className=\"container\">\r\n                <h1 >Play the TeamFortress 2 Matching Game</h1>\r\n                <p>Click on any Image to get started, Don't Click on any Image more then Once!</p>\r\n                <p>Score: {props.score} | Top Score: {props.topScore}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div onClick={() => props.clickedCard(props.id)} className=\"remove\">\r\n            <div className=\"card\">\r\n                <div className=\".img-container\">\r\n                    <img alt={props.name}\r\n                        src={props.image}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <div className=\"bottom\">\r\n            Clicky Game\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from \"react\";\nimport Header from \"./components/header\";\n// import NavBar from \"./components/navbar\";\nimport Wrapper from \"./components/wrapper\";\nimport Card from \"./components/card\";\nimport Footer from \"./components/footer\";\nimport './App.css';\nimport chars from \"./chars.json\";\n\nclass App extends Component {\n  state = {\n    chars: chars.sort(() => 0.5 - Math.random()),\n    score: 0,\n    topScore: 0,\n    alreadyClicked: []\n  }\n  clickedCard = id => {\n    if (this.state.alreadyClicked.includes(id)) {\n      this.setState({ score: 0, alreadyClicked: [] })\n      alert(\"You Lose!\")\n    } else {\n      this.setState({ score: this.state.score + 1 });\n      this.state.alreadyClicked.push(id)\n    }\n    if (this.state.score >= this.state.topScore) {\n      this.setState({ topScore: this.state.topScore + 1 })\n    }\n    if (this.state.score === this.state.chars.length) {\n      this.setState({ score: 0, alreadyClicked: [] })\n      alert(\"You Win!\")\n    }\n    this.setState({ chars: chars.sort(() => 0.5 - Math.random()) })\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <NavBar /> */}\n        <Header score={this.state.score} topScore={this.state.topScore} />\n        <Wrapper>\n          {this.state.chars.map(char => (\n            <Card\n              clickedCard={this.clickedCard}\n              id={char.id}\n              key={char.id}\n              name={char.name}\n              image={char.image}\n            />\n          ))}\n        </Wrapper>\n        <Footer />\n      </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}